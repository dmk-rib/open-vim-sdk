
// AUTOGENERATED FILE: DO NOT EDIT
// This file is generated from CommonAttributeExtensions.tt


using Vim.LinqArray;
using Vim.Math3d;

namespace Vim.G3d
{
    public static class CommonAttributes
    {

        public static string ObjectFaceSize = "g3d:all:facesize:0:int32:1";
        public static string Index = "g3d:corner:index:0:int32:1";
        public static string Position = "g3d:vertex:position:0:float32:3";
        public static string VertexUv = "g3d:vertex:uv:0:float32:2";
        public static string VertexUvw = "g3d:vertex:uv:0:float32:3";
        public static string VertexNormal = "g3d:vertex:normal:0:float32:3";
        public static string VertexColor = "g3d:vertex:color:0:float32:4";
        public static string VertexColor8Bit = "g3d:vertex:color:0:int8:4";
        public static string VertexBitangent = "g3d:vertex:bitangent:0:float32:3";
        public static string VertexTangent = "g3d:vertex:tangent:0:float32:4";
        public static string VertexSelectionWeight = "g3d:vertex:weight:0:float32:1";
        public static string FaceColor = "g3d:face:color:0:float32:4";
        public static string FaceMaterialId = "g3d:face:materialid:0:int32:1";
        public static string FaceNormal = "g3d:face:normal:0:float32:3";
        public static string FaceGroup = "g3d:face:group:0:int32:1";
        public static string SubGeoVertexOffset = "g3d:subgeometry:vertexoffset:0:int32:1";
        public static string SubGeoIndexOffset = "g3d:subgeometry:indexoffset:0:int32:1";
        public static string InstanceTransforms = "g3d:instance:transform:0:float32:16";
        public static string InstanceGeometries = "g3d:instance:subgeometry:0:int32:1";
        public static string LineTangentIn = "g3d:vertex:tangent:0:float32:3";
        public static string LineTangentOut = "g3d:vertex:tangent:1:float32:3";
    }

    public static class CommonAttributeExtensions
    {

        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.ObjectFaceSize, index);
        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.ObjectFaceSize);
        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this int[] xs, int index) => xs.ToIArray().ToObjectFaceSizeAttribute(index);
        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this int[] xs) => xs.ToIArray().ToObjectFaceSizeAttribute();
        public static GeometryAttribute<int> GetAttributeObjectFaceSize(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.ObjectFaceSize);
        public static IArray<int> GetAttributeDataObjectFaceSize(this IGeometryAttributes self) => self.GetAttributeObjectFaceSize()?.Data;
        public static GeometryAttribute<int> ToIndexAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.Index, index);
        public static GeometryAttribute<int> ToIndexAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.Index);
        public static GeometryAttribute<int> ToIndexAttribute(this int[] xs, int index) => xs.ToIArray().ToIndexAttribute(index);
        public static GeometryAttribute<int> ToIndexAttribute(this int[] xs) => xs.ToIArray().ToIndexAttribute();
        public static GeometryAttribute<int> GetAttributeIndex(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.Index);
        public static IArray<int> GetAttributeDataIndex(this IGeometryAttributes self) => self.GetAttributeIndex()?.Data;
        public static GeometryAttribute<Vector3> ToPositionAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.Position, index);
        public static GeometryAttribute<Vector3> ToPositionAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.Position);
        public static GeometryAttribute<Vector3> ToPositionAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToPositionAttribute(index);
        public static GeometryAttribute<Vector3> ToPositionAttribute(this Vector3[] xs) => xs.ToIArray().ToPositionAttribute();
        public static GeometryAttribute<Vector3> GetAttributePosition(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.Position);
        public static IArray<Vector3> GetAttributeDataPosition(this IGeometryAttributes self) => self.GetAttributePosition()?.Data;
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this IArray<Vector2> xs, int index) => xs.ToAttribute(CommonAttributes.VertexUv, index);
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this IArray<Vector2> xs) => xs.ToAttribute(CommonAttributes.VertexUv);
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this Vector2[] xs, int index) => xs.ToIArray().ToVertexUvAttribute(index);
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this Vector2[] xs) => xs.ToIArray().ToVertexUvAttribute();
        public static GeometryAttribute<Vector2> GetAttributeVertexUv(this IGeometryAttributes self) => self.GetAttribute<Vector2>(CommonAttributes.VertexUv);
        public static IArray<Vector2> GetAttributeDataVertexUv(this IGeometryAttributes self) => self.GetAttributeVertexUv()?.Data;
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexUvw, index);
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexUvw);
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexUvwAttribute(index);
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexUvwAttribute();
        public static GeometryAttribute<Vector3> GetAttributeVertexUvw(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexUvw);
        public static IArray<Vector3> GetAttributeDataVertexUvw(this IGeometryAttributes self) => self.GetAttributeVertexUvw()?.Data;
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexNormal, index);
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexNormal);
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexNormalAttribute(index);
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexNormalAttribute();
        public static GeometryAttribute<Vector3> GetAttributeVertexNormal(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexNormal);
        public static IArray<Vector3> GetAttributeDataVertexNormal(this IGeometryAttributes self) => self.GetAttributeVertexNormal()?.Data;
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexColor, index);
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.VertexColor);
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToVertexColorAttribute(index);
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this Vector4[] xs) => xs.ToIArray().ToVertexColorAttribute();
        public static GeometryAttribute<Vector4> GetAttributeVertexColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.VertexColor);
        public static IArray<Vector4> GetAttributeDataVertexColor(this IGeometryAttributes self) => self.GetAttributeVertexColor()?.Data;
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this IArray<Byte4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexColor8Bit, index);
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this IArray<Byte4> xs) => xs.ToAttribute(CommonAttributes.VertexColor8Bit);
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this Byte4[] xs, int index) => xs.ToIArray().ToVertexColor8BitAttribute(index);
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this Byte4[] xs) => xs.ToIArray().ToVertexColor8BitAttribute();
        public static GeometryAttribute<Byte4> GetAttributeVertexColor8Bit(this IGeometryAttributes self) => self.GetAttribute<Byte4>(CommonAttributes.VertexColor8Bit);
        public static IArray<Byte4> GetAttributeDataVertexColor8Bit(this IGeometryAttributes self) => self.GetAttributeVertexColor8Bit()?.Data;
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexBitangent, index);
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexBitangent);
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexBitangentAttribute(index);
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexBitangentAttribute();
        public static GeometryAttribute<Vector3> GetAttributeVertexBitangent(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexBitangent);
        public static IArray<Vector3> GetAttributeDataVertexBitangent(this IGeometryAttributes self) => self.GetAttributeVertexBitangent()?.Data;
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexTangent, index);
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.VertexTangent);
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToVertexTangentAttribute(index);
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this Vector4[] xs) => xs.ToIArray().ToVertexTangentAttribute();
        public static GeometryAttribute<Vector4> GetAttributeVertexTangent(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.VertexTangent);
        public static IArray<Vector4> GetAttributeDataVertexTangent(this IGeometryAttributes self) => self.GetAttributeVertexTangent()?.Data;
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.VertexSelectionWeight, index);
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.VertexSelectionWeight);
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this float[] xs, int index) => xs.ToIArray().ToVertexSelectionWeightAttribute(index);
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this float[] xs) => xs.ToIArray().ToVertexSelectionWeightAttribute();
        public static GeometryAttribute<float> GetAttributeVertexSelectionWeight(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.VertexSelectionWeight);
        public static IArray<float> GetAttributeDataVertexSelectionWeight(this IGeometryAttributes self) => self.GetAttributeVertexSelectionWeight()?.Data;
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.FaceColor, index);
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.FaceColor);
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToFaceColorAttribute(index);
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this Vector4[] xs) => xs.ToIArray().ToFaceColorAttribute();
        public static GeometryAttribute<Vector4> GetAttributeFaceColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.FaceColor);
        public static IArray<Vector4> GetAttributeDataFaceColor(this IGeometryAttributes self) => self.GetAttributeFaceColor()?.Data;
        public static GeometryAttribute<int> ToFaceMaterialIdAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.FaceMaterialId, index);
        public static GeometryAttribute<int> ToFaceMaterialIdAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.FaceMaterialId);
        public static GeometryAttribute<int> ToFaceMaterialIdAttribute(this int[] xs, int index) => xs.ToIArray().ToFaceMaterialIdAttribute(index);
        public static GeometryAttribute<int> ToFaceMaterialIdAttribute(this int[] xs) => xs.ToIArray().ToFaceMaterialIdAttribute();
        public static GeometryAttribute<int> GetAttributeFaceMaterialId(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.FaceMaterialId);
        public static IArray<int> GetAttributeDataFaceMaterialId(this IGeometryAttributes self) => self.GetAttributeFaceMaterialId()?.Data;
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.FaceNormal, index);
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.FaceNormal);
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToFaceNormalAttribute(index);
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this Vector3[] xs) => xs.ToIArray().ToFaceNormalAttribute();
        public static GeometryAttribute<Vector3> GetAttributeFaceNormal(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.FaceNormal);
        public static IArray<Vector3> GetAttributeDataFaceNormal(this IGeometryAttributes self) => self.GetAttributeFaceNormal()?.Data;
        public static GeometryAttribute<int> ToFaceGroupAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.FaceGroup, index);
        public static GeometryAttribute<int> ToFaceGroupAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.FaceGroup);
        public static GeometryAttribute<int> ToFaceGroupAttribute(this int[] xs, int index) => xs.ToIArray().ToFaceGroupAttribute(index);
        public static GeometryAttribute<int> ToFaceGroupAttribute(this int[] xs) => xs.ToIArray().ToFaceGroupAttribute();
        public static GeometryAttribute<int> GetAttributeFaceGroup(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.FaceGroup);
        public static IArray<int> GetAttributeDataFaceGroup(this IGeometryAttributes self) => self.GetAttributeFaceGroup()?.Data;
        public static GeometryAttribute<int> ToSubGeoVertexOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.SubGeoVertexOffset, index);
        public static GeometryAttribute<int> ToSubGeoVertexOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.SubGeoVertexOffset);
        public static GeometryAttribute<int> ToSubGeoVertexOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToSubGeoVertexOffsetAttribute(index);
        public static GeometryAttribute<int> ToSubGeoVertexOffsetAttribute(this int[] xs) => xs.ToIArray().ToSubGeoVertexOffsetAttribute();
        public static GeometryAttribute<int> GetAttributeSubGeoVertexOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.SubGeoVertexOffset);
        public static IArray<int> GetAttributeDataSubGeoVertexOffset(this IGeometryAttributes self) => self.GetAttributeSubGeoVertexOffset()?.Data;
        public static GeometryAttribute<int> ToSubGeoIndexOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.SubGeoIndexOffset, index);
        public static GeometryAttribute<int> ToSubGeoIndexOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.SubGeoIndexOffset);
        public static GeometryAttribute<int> ToSubGeoIndexOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToSubGeoIndexOffsetAttribute(index);
        public static GeometryAttribute<int> ToSubGeoIndexOffsetAttribute(this int[] xs) => xs.ToIArray().ToSubGeoIndexOffsetAttribute();
        public static GeometryAttribute<int> GetAttributeSubGeoIndexOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.SubGeoIndexOffset);
        public static IArray<int> GetAttributeDataSubGeoIndexOffset(this IGeometryAttributes self) => self.GetAttributeSubGeoIndexOffset()?.Data;
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformsAttribute(this IArray<Matrix4x4> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceTransforms, index);
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformsAttribute(this IArray<Matrix4x4> xs) => xs.ToAttribute(CommonAttributes.InstanceTransforms);
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformsAttribute(this Matrix4x4[] xs, int index) => xs.ToIArray().ToInstanceTransformsAttribute(index);
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformsAttribute(this Matrix4x4[] xs) => xs.ToIArray().ToInstanceTransformsAttribute();
        public static GeometryAttribute<Matrix4x4> GetAttributeInstanceTransforms(this IGeometryAttributes self) => self.GetAttribute<Matrix4x4>(CommonAttributes.InstanceTransforms);
        public static IArray<Matrix4x4> GetAttributeDataInstanceTransforms(this IGeometryAttributes self) => self.GetAttributeInstanceTransforms()?.Data;
        public static GeometryAttribute<int> ToInstanceGeometriesAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceGeometries, index);
        public static GeometryAttribute<int> ToInstanceGeometriesAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.InstanceGeometries);
        public static GeometryAttribute<int> ToInstanceGeometriesAttribute(this int[] xs, int index) => xs.ToIArray().ToInstanceGeometriesAttribute(index);
        public static GeometryAttribute<int> ToInstanceGeometriesAttribute(this int[] xs) => xs.ToIArray().ToInstanceGeometriesAttribute();
        public static GeometryAttribute<int> GetAttributeInstanceGeometries(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.InstanceGeometries);
        public static IArray<int> GetAttributeDataInstanceGeometries(this IGeometryAttributes self) => self.GetAttributeInstanceGeometries()?.Data;
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.LineTangentIn, index);
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.LineTangentIn);
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToLineTangentInAttribute(index);
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this Vector3[] xs) => xs.ToIArray().ToLineTangentInAttribute();
        public static GeometryAttribute<Vector3> GetAttributeLineTangentIn(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.LineTangentIn);
        public static IArray<Vector3> GetAttributeDataLineTangentIn(this IGeometryAttributes self) => self.GetAttributeLineTangentIn()?.Data;
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.LineTangentOut, index);
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.LineTangentOut);
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToLineTangentOutAttribute(index);
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this Vector3[] xs) => xs.ToIArray().ToLineTangentOutAttribute();
        public static GeometryAttribute<Vector3> GetAttributeLineTangentOut(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.LineTangentOut);
        public static IArray<Vector3> GetAttributeDataLineTangentOut(this IGeometryAttributes self) => self.GetAttributeLineTangentOut()?.Data;

    }
}
