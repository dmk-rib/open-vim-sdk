<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// AUTOGENERATED FILE: DO NOT EDIT
// This file is generated from CommonAttributeExtensions.tt

<# 
string[] namesDescriptorAndTypes = {
    "ObjectFaceSize",       "g3d:all:facesize:0:int32:1","int",
    "Index",                "g3d:corner:index:0:int32:1","int",
    "Position",             "g3d:vertex:position:0:float32:3","Vector3",
    "VertexUv",             "g3d:vertex:uv:0:float32:2","Vector2",
    "VertexUvw",            "g3d:vertex:uv:0:float32:3","Vector3",
    "VertexNormal",         "g3d:vertex:normal:0:float32:3","Vector3",
    "VertexColor",          "g3d:vertex:color:0:float32:4","Vector4",
    "VertexColor8Bit",      "g3d:vertex:color:0:int8:4","Byte4",
    "VertexBitangent",      "g3d:vertex:bitangent:0:float32:3","Vector3",
    "VertexTangent",        "g3d:vertex:tangent:0:float32:4","Vector4",
    "VertexSelectionWeight","g3d:vertex:weight:0:float32:1","float",
    "FaceColor",            "g3d:face:color:0:float32:4","Vector4",
    "FaceMaterialId",       "g3d:face:materialid:0:int32:1","int",
    "FaceNormal",           "g3d:face:normal:0:float32:3","Vector3",
    "FaceGroup",            "g3d:face:group:0:int32:1","int",
    "SubGeoVertexOffset",   "g3d:subgeometry:vertexoffset:0:int32:1","int",
    "SubGeoIndexOffset",    "g3d:subgeometry:indexoffset:0:int32:1","int",
    "InstanceTransforms",   "g3d:instance:transform:0:float32:16", "Matrix4x4",
    "InstanceGeometries",   "g3d:instance:subgeometry:0:int32:1", "int",
    "LineTangentIn",        "g3d:vertex:tangent:0:float32:3","Vector3",
    "LineTangentOut",       "g3d:vertex:tangent:1:float32:3","Vector3",
};
#>

using Vim.LinqArray;
using Vim.Math3d;

namespace Vim.G3d
{
    public static class CommonAttributes
    {

<#
    for (var i=0; i < namesDescriptorAndTypes.Length; i += 3)
    {
        var name = namesDescriptorAndTypes[i];
        var desc = namesDescriptorAndTypes[i + 1];
        var type = namesDescriptorAndTypes[i + 2];
#>
        public static string <#= name #> = "<#= desc #>";
<#
    }
#>
    }

    public static class CommonAttributeExtensions
    {

<#
    for (var i=0; i < namesDescriptorAndTypes.Length; i += 3)
    {
        var name = namesDescriptorAndTypes[i];
        var desc = namesDescriptorAndTypes[i + 1];
        var type = namesDescriptorAndTypes[i + 2];
        var codeName = "CommonAttributes." + name;
#>
        public static GeometryAttribute<<#= type #>> To<#= name #>Attribute(this IArray<<#= type #>> xs, int index) => xs.ToAttribute(<#= codeName #>, index);
        public static GeometryAttribute<<#= type #>> To<#= name #>Attribute(this IArray<<#= type #>> xs) => xs.ToAttribute(<#= codeName #>);
        public static GeometryAttribute<<#= type #>> To<#= name #>Attribute(this <#= type #>[] xs, int index) => xs.ToIArray().To<#= name #>Attribute(index);
        public static GeometryAttribute<<#= type #>> To<#= name #>Attribute(this <#= type #>[] xs) => xs.ToIArray().To<#= name #>Attribute();
        public static GeometryAttribute<<#= type #>> GetAttribute<#= name #>(this IGeometryAttributes self) => self.GetAttribute<<#= type #>>(<#= codeName #>);
        public static IArray<<#= type #>> GetAttributeData<#= name #>(this IGeometryAttributes self) => self.GetAttribute<#= name #>()?.Data;
<#
    }
#>

    }
}
